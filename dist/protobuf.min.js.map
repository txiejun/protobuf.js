{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/common.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/inherits.js","src/mapfield.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/prototype.js","src/reader.js","src/root.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/codegen.js","src/util/longbits.js","src/verifier.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","common","name","json","test","nested","google","protobuf","Any","fields","type_url","type","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","Decoder","this","Enum","Reader","types","util","DecoderPrototype","prototype","Object","defineProperties","fieldsById","get","ctor","decode","reader","limit","undefined","len","pos","message","tag","field","resolve","resolvedType","map","resolvedKeyType","uint32","ks","vs","basic","longToHash","repeated","packed","wireType","plimit","skipType","generate","fieldsArray","gen","codegen","prop","safeProp","eof","fullName","fld","toHash","Encoder","Writer","EncoderPrototype","encode","writer","fi","keys","fork","mapKey","ldelim","required","long","longNeq","defaultValue","reset","keyWireType","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","_TypeError","valuesById","forEach","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","isObject","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","Type","MapField","getOption","setOption","ifNotSet","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","default","fromValue","jsonConvert","enum","String","Number","toNumber","charAt","inherits","clazz","classProperties","$type","noStatics","merge","finish","encodeDelimited","decodeDelimited","verify","Prototype","constructor","noRegister","prototypeProperties","oneofsArray","set","MapFieldPrototype","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","performRequest","callback","asPromise","requestBuffer","e1","setTimeout","self","err","responseBuffer","e2","Namespace","_nestedArray","namespace","arrayToJSON","array","obj","NamespacePrototype","Service","nestedTypes","nestedError","join","nestedArray","toArray","methods","addJSON","j","object","indexOf","prev","setOptions","onAdd","onRemove","define","path","split","Array","isArray","ptr","part","shift","resolveAll","parentAlreadyChecked","root","slice","found","proto","create","Root","ReflectionObjectPrototype","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fields","addFieldsToParent","OneOfPrototype","push","index","splice","lower","token","camelCase","substring","replace","$0","$1","toUpperCase","parse","source","illegal","tn","line","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","properties","any","fieldsOnly","asJSON","key","indexOutOfRange","writeLength","buf","Buffer","isBuffer","BufferReader","Tag","readLongVarint","lo","hi","b","LongBits","RangeError","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readLongFixed","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","initBufferReader","ieee754","ReaderPrototype","ArrayImpl","Uint8Array","_slice","subarray","int32","octet","sint32","int64","uint64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","float","double","bytes","string","out","p","c1","fromCharCode","apply","remain","BufferReaderPrototype","readFloatLE","readDoubleLE","deferred","files","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","cb","process","JSON","parsed","fetch","queued","weak","idx","altname","newDeferred","_methodsArray","ServicePrototype","methodsArray","inherited","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_requiredFieldsArray","_oneofsArray","_ctor","TypePrototype","Verifier","names","requiredFieldsArray","supported","P","fieldName","oneOfName","nestedName","filter","encoder","readerOrBuffer","decoder","verifier","bake","emptyArray","freeze","fn","ctx","args","arguments","Promise","reject","concat","fs","readFile","xhr","XMLHttpRequest","onload","status","responseText","onerror","open","send","isAbsolutePath","normalizePath","parts","prefix","isFinite","description","TypeError","originPath","importPath","alreadyNormalized","from","longFromHash","hash","unsigned","bits","fromHash","fromBits","fromNumber","low","high","dst","src","fmt","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","format","params","param","stringify","str","scope","verbose","console","Function","LongBitsPrototype","zero","zzEncode","charCodeAt","mask","part0","part1","part2","VerifierPrototype","reason","hasReasonVar","Op","val","noop","State","tail","BufferWriter","writeByte","writeVarint32","writeVarint64","writeFixed32","writeFixed64","writeFloat","writeDouble","writeString","c2","byteLength","strlen","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","writeStringBuffer","WriterPrototype","op","writeBytes","state","pop","BufferWriterPrototype","allocUnsafe","global"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = Decoder;\r\n\r\nvar Enum   = require(5),\r\n    Reader = require(15),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new decoder for the specified message type.\r\n * @classdesc Wire format decoder using code generation on top of reflection.\r\n * @constructor\r\n * @param {Type} type Message type\r\n */\r\nfunction Decoder(type) {\r\n\r\n    /**\r\n     * Message type.\r\n     * @type {Type}\r\n     */\r\n    this.type = type;\r\n}\r\n\r\n/** @alias Decoder.prototype */\r\nvar DecoderPrototype = Decoder.prototype;\r\n\r\n// This is here to mimic Type so that fallback functions work without having to bind()\r\nObject.defineProperties(DecoderPrototype, {\r\n\r\n    /**\r\n     * Fields of this decoder's message type by id for lookups.\r\n     * @name Decoder#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            return this.type.fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * With this decoder's message type registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Decoder#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this.type.ctor;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Decodes a message of this decoder's message type.\r\n * @param {Reader} reader Reader to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Populated runtime message\r\n */\r\nDecoderPrototype.decode = function decode_fallback(reader, length) { // codegen reference and fallback\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.fieldsById,\r\n        reader  = reader instanceof Reader ? reader : Reader(reader),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new this.ctor();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] || (message[field.name] = []);\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                  else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to this decoder's message type.\r\n * @returns {function} Decoder function with an identical signature to {@link Decoder#decode}\r\n */\r\nDecoderPrototype.generate = function generate() {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = this.type.fieldsArray;    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor()\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s||(m%s=[])\", prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    return gen\r\n    .eof(this.type.fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : fields.map(function(fld) { return fld.resolvedType; }),\r\n        util   : util.toHash\r\n    });\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Encoder;\r\n\r\nvar Enum   = require(5),\r\n    Writer = require(25),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new encoder for the specified message type.\r\n * @classdesc Wire format encoder using code generation on top of reflection\r\n * @constructor\r\n * @param {Type} type Message type\r\n */\r\nfunction Encoder(type) {\r\n\r\n    /**\r\n     * Message type.\r\n     * @type {Type}\r\n     */\r\n    this.type = type;\r\n}\r\n\r\n/** @alias Encoder.prototype */\r\nvar EncoderPrototype = Encoder.prototype;\r\n\r\n// This is here to mimic Type so that fallback functions work without having to bind()\r\nObject.defineProperties(EncoderPrototype, {\r\n\r\n    /**\r\n     * Fields of this encoder's message type as an array for iteration.\r\n     * @name Encoder#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this.type.fieldsArray;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Encodes a message of this encoder's message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nEncoderPrototype.encode = function encode_fallback(message, writer) { // codegen reference and fallback\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer();\r\n    var fields = this.fieldsArray, fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to this encoder's message type.\r\n * @returns {function} Encoder function with an identical signature to {@link Encoder#encode}\r\n */\r\nEncoderPrototype.generate = function generate() {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = this.type.fieldsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\")\r\n\r\n    .eof(this.type.fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : fields.map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nObject.defineProperties(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(19),\r\n    Enum      = require(5),\r\n    MapField  = require(8),\r\n    types     = require(20),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string} [rule=optional] Field rule\r\n * @param {string} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options.default) !== undefined)\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Prototype#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options.enum === String)\r\n            return this.resolvedType.valuesById[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inherits;\r\n\r\nvar Prototype = require(14),\r\n    Type      = require(19),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Options passed to {@link inherits}, modifying its behavior.\r\n * @typedef InheritanceOptions\r\n * @type {Object}\r\n * @property {boolean} [noStatics=false] Skips adding the default static methods on top of the constructor\r\n * @property {boolean} [noRegister=false] Skips registering the constructor with the reflected type\r\n */\r\n\r\n/**\r\n * Inherits a custom class from the message prototype of the specified message type.\r\n * @param {Function} clazz Inheriting class\r\n * @param {Type} type Inherited message type\r\n * @param {InheritanceOptions} [options] Inheritance options\r\n * @returns {Prototype} Created prototype\r\n */\r\nfunction inherits(clazz, type, options) {\r\n    if (typeof clazz !== 'function')\r\n        throw _TypeError(\"clazz\", \"a function\");\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (!options)\r\n        options = {};\r\n\r\n    /**\r\n     * This is not an actual type but stands as a reference for any constructor of a custom message class that you pass to the library.\r\n     * @name Class\r\n     * @extends Prototype\r\n     * @constructor\r\n     * @param {Object.<string,*>} [properties] Properties to set on the message\r\n     * @see {@link inherits}\r\n     */\r\n\r\n    var classProperties = {\r\n        \r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Class.$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    if (!options.noStatics)\r\n        util.merge(classProperties, {\r\n\r\n            /**\r\n             * Encodes a message of this type to a buffer.\r\n             * @name Class.encode\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {number[]} Encoded message\r\n             */\r\n            encode: {\r\n                value: function encode(message, writer) {\r\n                    return this.$type.encode(message, writer).finish();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Encodes a message of this type preceeded by its length as a varint to a buffer.\r\n             * @name Class.encodeDelimited\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {number[]} Encoded message\r\n             */\r\n            encodeDelimited: {\r\n                value: function encodeDelimited(message, writer) {\r\n                    return this.$type.encodeDelimited(message, writer).finish();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type from a buffer.\r\n             * @name Class.decode\r\n             * @function\r\n             * @param {number[]} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decode: {\r\n                value: function decode(buffer) {\r\n                    return this.$type.decode(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type preceeded by its length as a varint from a buffer.\r\n             * @name Class.decodeDelimited\r\n             * @function\r\n             * @param {number[]} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decodeDelimited: {\r\n                value: function decodeDelimited(buffer) {\r\n                    return this.$type.decodeDelimited(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Verifies a message of this type.\r\n             * @name Class.verify\r\n             * @function\r\n             * @param {Prototype|Object} message Message or plain object to verify\r\n             * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            verify: {\r\n                value: function verify(message) {\r\n                    return this.$type.verify(message);\r\n                }\r\n            }\r\n\r\n        }, true);\r\n\r\n    Object.defineProperties(clazz, classProperties);\r\n    var prototype = inherits.defineProperties(new Prototype(), type);\r\n    clazz.prototype = prototype;\r\n    prototype.constructor = clazz;\r\n\r\n    if (!options.noRegister)\r\n        type.ctor = clazz;\r\n\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Defines the reflected type's default values and virtual oneof properties on the specified prototype.\r\n * @memberof inherits\r\n * @param {Prototype} prototype Prototype to define properties upon\r\n * @param {Type} type Reflected message type\r\n * @returns {Prototype} The specified prototype\r\n */\r\ninherits.defineProperties = function defineProperties(prototype, type) {\r\n\r\n    var prototypeProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Prototype#$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    // Initialize default values\r\n    type.fieldsArray.forEach(function(field) {\r\n        field.resolve();\r\n        if (!util.isObject(field.defaultValue))\r\n            // objects are mutable (i.e. would modify the array on the prototype, not the instance)\r\n            prototype[field.name] = field.defaultValue;\r\n    });\r\n\r\n    // Define each oneof with a non-enumerable getter and setter for the present field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        prototypeProperties[oneof.resolve().name] = {\r\n            get: function() {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    var field = oneof.parent.fields[keys[i]];\r\n                    if (this[keys[i]] != field.defaultValue) // eslint-disable-line eqeqeq\r\n                        return keys[i];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    Object.defineProperties(prototype, prototypeProperties);\r\n    return prototype;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(6);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(5),\r\n    types   = require(20),\r\n    util    = require(21);\r\n\r\n/**\r\n * Constructs a new map field.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(19),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean} [requestStream] Whether the request is streamed\r\n * @param {boolean} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n    \r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Calls this method.\r\n * @param {Prototype|Object} message Request message\r\n * @param {function(number[], function(?Error, (number[])=))} performRequest A function performing the request on binary level, taking a buffer and a node-style callback for the response buffer as its parameters.\r\n * @param {function(Error, Prototype=)} [callback] Node-style callback function\r\n * @returns {Promise<Prototype>|undefined} A promise if `callback` has been omitted\r\n */\r\nMethodPrototype.call = function call(message, performRequest, callback) {\r\n    if (!callback)\r\n        return util.asPromise(call, this, message, performRequest);\r\n    var requestBuffer;\r\n    try {\r\n        requestBuffer = this.resolve().resolvedRequestType.encode(message);\r\n    } catch (e1) {\r\n        setTimeout(function() {\r\n            callback(e1);\r\n        });\r\n        return undefined;\r\n    }\r\n    var self = this;\r\n    performRequest(requestBuffer, function(err, responseBuffer) {\r\n        if (!err) {\r\n            try {\r\n                callback(null, self.resolvedResponseType.decode(responseBuffer));\r\n                return;\r\n            } catch (e2) {\r\n                err = e2;\r\n            }\r\n        }\r\n        callback(err);\r\n    });\r\n    return undefined;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(5),\r\n    Type    = require(19),\r\n    Field   = require(6),\r\n    Service = require(17),\r\n    util    = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} json Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(json) {\r\n    if (json) {\r\n        var keys = Object.keys(json);\r\n        for (var i = 0; i < keys.length; ++i) {\r\n            var nested = json[keys[i]];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return this.add(nestedTypes[j].fromJSON(keys[i], nested));\r\n            throw _TypeError(\"json.\" + keys[i], \"JSON for \" + nestedError);\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object specified by path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found.lookup && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(16),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {Function} constructor Extending constructor\r\n * @returns {Object} Prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var proto = constructor.prototype = Object.create(this.prototype);\r\n    proto.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return proto;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.root;\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.fullName;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(6),\r\n    util  = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {Array.<string>}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Array.<Field>}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize = require(18),\r\n    Root     = require(16),\r\n    Type     = require(19),\r\n    Field    = require(6),\r\n    MapField = require(8),\r\n    OneOf    = require(12),\r\n    Enum     = require(5),\r\n    Service  = require(17),\r\n    Method   = require(9),\r\n    types    = require(20);\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(name) {\r\n    return name.substring(0,1)\r\n         + name.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next());\r\n        parseInlineOptions(parent.values[name] = new Number(value)); // eslint-disable-line no-new-wrappers\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        package       : pkg,\r\n        imports       : imports,\r\n        weakImports   : weakImports,\r\n        syntax        : syntax,\r\n        root          : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Prototype;\r\n\r\n/**\r\n * Options passed to the {@link Prototype|prototype constructor}, modifying its behavior.\r\n * @typedef PrototypeOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Sets only properties that reference a field\r\n */\r\n\r\n/**\r\n * Constructs a new prototype.\r\n * This method should be called from your custom constructors, i.e. `Prototype.call(this, properties)`.\r\n * @classdesc Runtime message prototype ready to be extended by custom classes or generated code.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @param {PrototypeOptions} [options] Prototype options\r\n * @abstract\r\n * @see {@link inherits}\r\n * @see {@link Class}\r\n */\r\nfunction Prototype(properties, options) {\r\n    if (properties) {\r\n        var any    = !(options && options.fieldsOnly),\r\n            fields = this.constructor.$type.fields,\r\n            keys   = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (fields[keys[i]] || any)\r\n                this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a runtime message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {Function} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {Function} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nPrototype.prototype.asJSON = function asJSON(options) {\r\n    var any    = !(options && options.fieldsOnly),\r\n        fields = this.constructor.$type.fields,\r\n        json   = {};\r\n    var keys   = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (any)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util     = require(21),\r\n    ieee754  = require(1);\r\nvar LongBits = util.LongBits,\r\n    Long     = util.Long;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return \"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len;\r\n}\r\n\r\n/**\r\n * Constructs a new reader using the specified buffer.\r\n * When called as a function, returns an appropriate reader for the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {number[]} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    if (!(this instanceof Reader))\r\n        return util.Buffer && (!buffer || util.Buffer.isBuffer(buffer))\r\n            ? new BufferReader(buffer)\r\n            : new Reader(buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {number[]}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined'\r\n    ? Uint8Array\r\n    : Array;\r\nReaderPrototype._slice = ArrayImpl.prototype.slice || ArrayImpl.prototype.subarray;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw RangeError(indexOutOfRange(this));\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    var value = 0,\r\n        shift = 0,\r\n        octet = 0;\r\n    do {\r\n        if (this.pos >= this.len)\r\n            throw RangeError(indexOutOfRange(this));\r\n        octet = this.buf[this.pos++];\r\n        if (shift < 32)\r\n            value |= (octet & 127) << shift;\r\n        shift += 7;\r\n    } while (octet & 128);\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/**\r\n * Reads a possibly 64 bits varint.\r\n * @returns {LongBits} Long bits\r\n * @this {Reader}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw RangeError(indexOutOfRange(this));\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw RangeError(indexOutOfRange(this));\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw RangeError(indexOutOfRange(this));\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.int64 = Long && read_int64_long || read_int64_number;\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.uint64 = Long && read_uint64_long || read_uint64_number;\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.sint64 = Long && read_sint64_long || read_sint64_number;\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw RangeError(indexOutOfRange(this, 4));\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/**\r\n * Reads a 64 bit value.\r\n * @returns {LongBits} Long bits\r\n * @this {Reader}\r\n * @inner \r\n * @ignore\r\n */\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw RangeError(indexOutOfRange(this, 8));\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.fixed64 = Long && read_fixed64_long || read_fixed64_number;\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.sfixed64 = Long && read_sfixed64_long || read_sfixed64_number;\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw RangeError(indexOutOfRange(this, 4));\r\n    var value = ieee754.read(this.buf, this.pos, false, 23, 4);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw RangeError(indexOutOfRange(this, 4));\r\n    var value = ieee754.read(this.buf, this.pos, false, 52, 8);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {number[]} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw RangeError(indexOutOfRange(this, length));\r\n    this.pos += length;\r\n    return this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw RangeError(indexOutOfRange(this));\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw RangeError(indexOutOfRange(this, length));\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {number[]} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {number[]} [buffer] New buffer for a new sequence of read operations\r\n * @returns {number[]} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\n/**\r\n * Reads a float (32 bit) as a number using node buffers.\r\n * @returns {number} Value read\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw RangeError(indexOutOfRange(this, 4));\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number using node buffers.\r\n * @returns {number} Value read\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw RangeError(indexOutOfRange(this, 8));\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a string.\r\n * @returns {string} Value read\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start = this.pos,\r\n        end   = this.pos + length;\r\n    if (end > this.len)\r\n        throw RangeError(indexOutOfRange(this, length));\r\n    this.pos += length;\r\n    return this.buf.toString(\"utf8\", start, end);\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations using node buffers, frees all resources and returns the remaining buffer.\r\n * @param {Buffer} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Buffer} Finished buffer\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(6),\r\n    util   = require(21),\r\n    common = require(2);\r\n\r\n/**\r\n * Constructs a new root namespace.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} [callback] Node-style callback function\r\n * @returns {Promise<Root>|undefined} A promise if `callback` has been omitted\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source)) {\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n                self.files.push(filename);\r\n            } else {\r\n                var parsed = require(13)(source, self);\r\n                self.files.push(filename);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Check if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            ++queued;\r\n            setTimeout(function() {\r\n                --queued;\r\n                process(filename, common[filename]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        ++queued;\r\n        util.fetch(filename, function(err, source) {\r\n            --queued;\r\n            if (!callback)\r\n                return; // terminated meanwhile\r\n            if (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        });\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(filename);\r\n    });\r\n\r\n    if (!queued)\r\n        finish(null);\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(9),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new service.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    return new Service(name, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n","\"use strict\";\r\n/* eslint-disable default-case, callback-return */\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return match[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(5),\r\n    OneOf     = require(12),\r\n    Field     = require(6),\r\n    Service   = require(17),\r\n    Prototype = require(14),\r\n    inherits  = require(7),\r\n    util      = require(21),\r\n    Reader    = require(15),\r\n    Encoder   = require(4),\r\n    Decoder   = require(3),\r\n    Verifier  = require(24);\r\nvar codegen   = util.codegen;\r\n\r\n/**\r\n * Constructs a new message type.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached required fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._requiredFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {?Function}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Required fields of thiss message as an array for iteration.\r\n     * @name Type#requiredFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    requiredFieldsArray: {\r\n        get: function() {\r\n            if (this._requiredFieldsArray)\r\n                return this._requiredFieldsArray;\r\n            var fields   = this.fieldsArray,\r\n                required = this._requiredFieldsArray = [];\r\n            for (var i = 0; i < fields.length; ++i)\r\n                if (fields[i].required)\r\n                    required[required.length] = fields[i];\r\n            return required;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            if (this._ctor)\r\n                return this._ctor;\r\n            var ctor;\r\n            if (codegen.supported)\r\n                ctor = codegen(\"p\")(\"P.call(this,p)\").eof(this.fullName + \"$ctor\", {\r\n                    P: Prototype\r\n                });\r\n            else\r\n                ctor = function GenericMessage(properties) {\r\n                    Prototype.call(this, properties);\r\n                };\r\n            ctor.prototype = inherits(ctor, this);\r\n            this._ctor = ctor;\r\n            return ctor;\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Prototype))\r\n                throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._requiredFieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    break;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        oneofs  : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields  : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object} [properties] Properties to set\r\n * @param {?Function} [ctor] Constructor to use.\r\n * Defaults to use the internal constuctor.\r\n * @returns {Prototype} Message instance\r\n */\r\nTypePrototype.create = function create(properties, ctor) {\r\n    if (typeof properties === 'function') {\r\n        ctor = properties;\r\n        properties = undefined;\r\n    } else if (properties /* already */ instanceof Prototype)\r\n        return properties;\r\n    if (ctor) {\r\n        if (!(ctor.prototype instanceof Prototype))\r\n            throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n    } else\r\n        ctor = this.ctor;\r\n    return new ctor(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    var encoder = new Encoder(this);\r\n    this.encode = codegen.supported\r\n        ? encoder.generate()\r\n        : encoder.encode;\r\n    return this.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|number[]} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    var decoder = new Decoder(this);\r\n    this.decode = codegen.supported\r\n        ? decoder.generate()\r\n        : decoder.decode;\r\n    return this.decode(readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|number[]} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Prototype|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    var verifier = new Verifier(this);\r\n    this.verify = codegen.supported\r\n        ? verifier.generate()\r\n        : verifier.verify;\r\n    return this.verify(message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = module.exports = {};\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\nvar emptyArray = [];\r\nif (Object.freeze)\r\n    Object.freeze(emptyArray);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n], 2);\r\n","\"use strict\";\r\n\r\n/**\r\n * Utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = {};\r\n\r\nvar LongBits =\r\nutil.LongBits = require(23);\r\nutil.codegen  = require(22);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Buffer = null;\r\n\r\ntry { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Long = null;\r\n\r\ntry { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @memberof util\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nutil.isString = isString;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=a string] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} Promise if callback has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    var fs; try { fs = require(\"fs\"); } catch (e) {} // eslint-disable-line no-empty\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onload = function() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    };\r\n    xhr.onerror = function() {\r\n        return callback(Error(\"request failed\"));\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return /^[a-z_$][a-z0-9_$]*$/i.test(prop) ? \".\" + prop : \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * Programmatically generates a function.\r\n * @memberof util\r\n * @param {...string} params Function parameter names\r\n * @returns {util.CodegenAppender} Printf-like appender function\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen(/* varargs */) {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'];\r\n\r\n    var indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * Appends a printf-like formatted line to the generated source. Returned when calling {@link util.codegen}.\r\n     * @typedef CodegenAppender\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} format A printf-like format string\r\n     * @param {...*} params Format replacements\r\n     * @returns {util.CodegenAppender} Itself\r\n     * @property {util.CodegenStringer} str\r\n     * @property {util.CodegenEnder} eof\r\n     * @see {@link https://nodejs.org/docs/latest/api/util.html#util_util_format_format_args}\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var fmt = [];\r\n        for (var i = 0; i < arguments.length; ++i)\r\n            fmt[i] = arguments[i];\r\n        var line = gen.fmt.apply(null, fmt);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    gen.fmt = function fmt(format) {\r\n        var params = Array.prototype.slice.call(arguments, 1),\r\n            index  = 0;\r\n        return format.replace(/%([djs])/g, function($0, $1) {\r\n            var param = params[index++];\r\n            return $1 === \"j\"\r\n                ? JSON.stringify(param)\r\n                : String(param);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @typedef CodegenStringer\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     */\r\n    /**/\r\n    gen.str = function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    };\r\n\r\n    /**\r\n     * Ends generation and builds the function.\r\n     * @typedef CodegenEnder\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object|Array.<string>} [scope] Function scope\r\n     * @returns {function} A function to apply the scope manually when `scope` is an array, otherwise the generated function with scope applied\r\n     */\r\n    /**/\r\n    gen.eof = function eof(name, scope) {\r\n        if (name && typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var code = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + code.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        code = \"return \" + code;\r\n        var params, values = [];\r\n        if (Array.isArray(scope)) {\r\n            params = scope.slice();\r\n        } else if (scope) {\r\n            params = Object.keys(scope);\r\n            values = params.map(function(key) { return scope[key]; });\r\n        } else\r\n            params = [];\r\n        var fn = Function.apply(null, params.concat(code)); // eslint-disable-line no-new-func\r\n        return values ? fn.apply(null, values) : fn();\r\n    };\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false;\r\ntry { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\n\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(21);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constrcuts new long bits from a number or long.\r\n * @param {Long|number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    return typeof value === 'number'\r\n        ? LongBits.fromNumber(value)\r\n        : new LongBits(value.low >>> 0, value.high >>> 0);\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask = -(this.hi >>> 31);\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | (this.hi & 1) << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                        ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Verifier;\r\n\r\nvar Enum = require(5),\r\n    Type = require(19),\r\n    util = require(21);\r\n\r\n/**\r\n * Constructs a new verifier for the specified message type.\r\n * @classdesc Runtime message verifier using code generation on top of reflection.\r\n * @constructor\r\n * @param {Type} type Message type\r\n */\r\nfunction Verifier(type) {\r\n\r\n    /**\r\n     * Message type.\r\n     * @type {Type}\r\n     */\r\n    this.type = type;\r\n}\r\n\r\n/** @alias Verifier.prototype */\r\nvar VerifierPrototype = Verifier.prototype;\r\n\r\n// This is here to mimic Type so that fallback functions work without having to bind()\r\nObject.defineProperties(VerifierPrototype, {\r\n\r\n    /**\r\n     * Fields of this verifier's message type as an array for iteration.\r\n     * @name Verifier#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this.type.fieldsArray;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name of this verifier's message type.\r\n     * @name Verifier#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            return this.type.fullName;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Verifies a runtime message of this verifier's message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nVerifierPrototype.verify = function verify_fallback(message) {\r\n    var fields = this.fieldsArray,\r\n        i = 0;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        if (value === undefined) {\r\n            if (field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.fullName;\r\n\r\n        } else if (field.resolvedType instanceof Enum && field.resolvedType.valuesById[value] === undefined) {\r\n            return \"invalid enum value \" + field.name + \" = \" + value + \" in \" + this.fullName;\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (!value && field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.fullName;\r\n            var reason;\r\n            if ((reason = field.resolvedType.verify(value)) !== null)\r\n                return reason;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Generates a verifier specific to this verifier's message type.\r\n * @returns {function} Verifier function with an identical signature to {@link Verifier#verify}\r\n */\r\nVerifierPrototype.generate = function generate() {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = this.type.fieldsArray;\r\n    var gen = util.codegen(\"m\");\r\n    var hasReasonVar = false;\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.required) { gen\r\n\r\n            (\"if(m%s===undefined)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, this.type.fullName);\r\n\r\n        } else if (field.resolvedType instanceof Enum) {\r\n            var values = util.toArray(field.resolvedType.values); gen\r\n\r\n            (\"switch(m%s){\", prop)\r\n                (\"default:\")\r\n                    (\"return 'invalid enum value %s = '+m%s+' in %s'\", field.name, prop, this.type.fullName);\r\n\r\n            for (var j = 0, l = values.length; j < l; ++j) gen\r\n                (\"case %d:\", values[j]); gen\r\n            (\"}\");\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (field.required) gen\r\n\r\n            (\"if(!m%s)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, this.type.fullName);\r\n\r\n            if (!hasReasonVar) { gen(\"var r\"); hasReasonVar = true; } gen\r\n\r\n            (\"if((r=types[%d].verify(m%s))!==null)\", i, prop)\r\n                (\"return r\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\")\r\n\r\n    .eof(this.type.fullName + \"$verify\", {\r\n        types : fields.map(function(fld) { return fld.resolvedType; })\r\n    });\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util     = require(21),\r\n    ieee754  = require(1);\r\nvar LongBits = util.LongBits;\r\n\r\n/**\r\n * Constructs a new writer operation.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(number[], number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(number[], number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n}\r\n\r\nWriter.State = State;\r\n\r\nvar ArrayImpl =  typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer.\r\n * When called as a function, returns an appropriate writer for the current environment.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @exports Writer\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n    if (!(this instanceof Writer))\r\n        return util.Buffer\r\n            ? new BufferWriter()\r\n            : new Writer();\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * State stack.\r\n     * @type {Object[]}\r\n     */\r\n    this.stack = [];\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(number[], number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, (id << 3 | wireType & 7) & 255);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = WriterPrototype.uint32;\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi || val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits;\r\n    if (typeof value === 'number')\r\n        bits = value ? LongBits.fromNumber(value) : LongBits.zero;\r\n    else if (value.low || value.high)\r\n        bits = new LongBits(value.low >>> 0, value.high >>> 0);\r\n    else\r\n        bits = LongBits.zero;\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint64 = function sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24  & 255;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeFixed64(buf, pos, val) {\r\n    buf[pos++] = val.lo        & 255;\r\n    buf[pos++] = val.lo >>> 8  & 255;\r\n    buf[pos++] = val.lo >>> 16 & 255;\r\n    buf[pos++] = val.lo >>> 24      ;\r\n    buf[pos++] = val.hi        & 255;\r\n    buf[pos++] = val.hi >>> 8  & 255;\r\n    buf[pos++] = val.hi >>> 16 & 255;\r\n    buf[pos  ] = val.hi >>> 24      ;\r\n}\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    return this.push(writeFixed64, 8, LongBits.from(value));\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    return this.push(writeFixed64, 8, LongBits.from(value).zzEncode());\r\n};\r\n\r\nfunction writeFloat(buf, pos, val) {\r\n    ieee754.write(buf, val, pos, false, 23, 4);\r\n}\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nfunction writeDouble(buf, pos, val) {\r\n    ieee754.write(buf, val, pos, false, 52, 8);\r\n}\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(buf, pos, val) { buf.set(val, pos); }\r\n    : function writeBytes_for(buf, pos, val) { for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i]; };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {number[]} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0, len = val.length, c1, c2; i < len; ++i) {\r\n        c1 = val.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6 | 192;\r\n            buf[pos++] = c1 & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && i + 1 < len && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    if (strlen) {\r\n        var len = 0;\r\n        for (var i = 0, c1; i < strlen; ++i) {\r\n            c1 = val.charCodeAt(i);\r\n            if (c1 < 128)\r\n                len += 1;\r\n            else if (c1 < 2048)\r\n                len += 2;\r\n            else if ((c1 & 0xFC00) === 0xD800 && i + 1 < strlen && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n                ++i;\r\n                len += 4;\r\n            } else\r\n                len += 3;\r\n        }\r\n        return len;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#ldelim}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.stack.push(new State(this));\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.stack.length) {\r\n        var state = this.stack.pop();\r\n        this.head = state.head;\r\n        this.tail = state.tail;\r\n        this.len  = state.len;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {number[]} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = new ArrayImpl(this.len),\r\n        pos  = 0;\r\n    this.reset();\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\n/**\r\n * Writes a float (32 bit) using node buffers.\r\n * @param {number} value Value to write\r\n * @returns {BufferWriter} `this`\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\n/**\r\n * Writes a double (64 bit float) using node buffers.\r\n * @param {number} value Value to write\r\n * @returns {BufferWriter} `this`\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * Writes a sequence of bytes using node buffers.\r\n * @param {Buffer} value Value to write\r\n * @returns {BufferWriter} `this`\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeStringBuffer(buf, pos, val) {\r\n    buf.write(val, pos);\r\n}\r\n\r\n/**\r\n * Writes a string using node buffers.\r\n * @param {string} value Value to write\r\n * @returns {BufferWriter} `this`\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations using node buffers and frees all resources.\r\n * @returns {Buffer} Finished buffer\r\n */\r\nBufferWriterPrototype.finish = function finish_buffer() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(this.len) || new util.Buffer(this.len),\r\n        pos  = 0;\r\n    this.reset();\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} [callback] Callback function\r\n * @returns {Promise<Root>|Object} A promise if callback has been omitted, otherwise the protobuf namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback) || protobuf;\r\n}\r\n\r\nprotobuf.load = load;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.Encoder          = require(\"./encoder\");\r\nprotobuf.Decoder          = require(\"./decoder\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Prototype        = require(\"./prototype\");\r\nprotobuf.inherits         = require(\"./inherits\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.util             = util;\r\n"],"sourceRoot":"."}